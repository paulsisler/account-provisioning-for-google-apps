# Configuration properties for the Account provisioning for Google Apps API.

# ==============================================================================
# Google API properties
# ==============================================================================
#
# **Note:** Follow the steps in the Google Apps domain configuration guide (CONFIG.md)
# to set these properties.
#
# The Google Apps domain.
# Example: apis.GoogleAPIs.domain=yourdomain.com
apis.GoogleAPIs.domain=papaworksathome.com

# Admin user who created the project in the Google Developer Console.
# Example:
# apis.GoogleAPIs.authUser=admin@yourdomain.com
apis.GoogleAPIs.authUser=paul@papaworksathome.com

# The P12 file that stores the Google private key. Can be generated following the
# steps in: https://cloud.google.com/storage/docs/authentication#service_accounts
# Example:
# apis.GoogleAPIs.keyPath=./service_account_key.p12
apis.GoogleAPIs.keyPath=/Documents/1_GRADschool/Google Apps/API/account-provisioning-for-google-apps-master

# This value represents an internal user for server side applications and can be
# generated following the steps in:
# https://cloud.google.com/storage/docs/authentication#service_accounts
# There's an extra step to enable API scopes in the Google Admin Console
# This scopes can be registered following the steps in:
# https://support.google.com/a/answer/162106?hl=en
# And adding the following scope to your service account:
# https://www.googleapis.com/auth/admin.directory.user
# Example:
# apis.GoogleAPIs.serviceAccountEmail=1234567890123-abcdefghijklmnopqrstuvwxz01234567@developer.gserviceaccount.com
apis.GoogleAPIs.serviceAccountEmail=369572193354-4tklvsabm4u4slisbi35a4gu95ltqgr5@developer.gserviceaccount.com

# This value is the full project name in the Google Developer Console project name
# can be obtained following the steps in:
# https://developers.google.com/console/help/new/#creatingdeletingprojects
# Example: apis.GoogleAPIs.appName=My project
apis.GoogleAPIs.appName=Acct Provisioning



# ==============================================================================
# Username generation properties
# ==============================================================================
#
# In order to save API calls we can validate with cached accounts, if
# cachedUsernames value is set to YES this tool will validate with cache,
# if not it will use API calls (The possible values are: YES, NO, default: NO).
accounts.UsernameGeneration.cachedUsernames=YES

# This variable defines the expiration time in hours of the cached usernames.
# After expiration the application refreshes the username cache.
# For reference, refreshing an account with 1 million users takes approximately
# 35 minutes.
# (Default value: 24)
# Valid values: Integers larger or equal to 1
accounts.UsernameGeneration.cacheExpirationHours=24

# The number of username suggestions to be returned for each call to suggest.
# Possible values: 1-10
# Default: 3
accounts.UsernameGeneration.numberOfSuggestions=5

# The amount of time (in seconds) that suggested usernames will remain locked
# (unavailable to another client).
# Default: 2 minutes.
accounts.UsernameGeneration.suggestedUsernamesTimeout=120

# A pattern is something that looks like [firstname][lastname]. This pattern
# indicates the API that we want to generate a username with "the firstname
# followed by the lastname". Now, if that username happens to be taken the
# API will need another pattern. Therefore, a list of multiple patterns is
# recommended. For example:
# accounts.UsernameGeneration.patterns=[firstname][lastname],[lastname][firstname]
# This will first try to generate a username with "the firstname followed by
# the lastname" if that is taken then it will try to generate a username with
# "the lastname followed by the firstname".
# Now, say we want to generate a username with "the nickname followed by the
# lastname" of a person. We'd simply do:
# accounts.UsernameGeneration.patterns=[nickname][lastname]
# What's [nickname] you might ask?
# Well, nickname is a field that should be passed to the suggest method.
# For example:
# var parameters = '{' +
#    '"firstname": "Jonathan",' +
#    '"lastname": "Bravo",' +
#    '"nickname": "Jonny"' +
#'}';
# This will generate the username jonnybravo.
# You can name nickname anything else as long as the key in the parameters
# passed to suggest and the key used in the pattern are the same.
#
# **Taking the first char(acters) of a field**
# Now say that for someone named John Smith we'd like to generate a username jsmith.
# We'd do it with the following pattern:
# [C1_firstname][lastname]
# C1 indicates that the API should take the first character of firstname. If we'd
# like to take the first two characters then we'd do:
# [C2_firstname][lastname]
# This same method applies for custom fields. For example, if we wanted to split
# the first character of the nickname we'd do:
# [C1_nickname]
#
# **Adding a counter to a pattern**
# Now, say we have so many people named "John Smith" in a school district that we
# ran out of patterns. We could then define a pattern that adds a number at the
# end of the username:
# [firstname][lastname][#]
# [#] indicates that a number will be added to the username. For example:
# johnsmith3
# This numeric value will start at 1 and continue adding until a username is
# available.
#
# **Adding separators to usernames**
# A common practice is to separate usernames with a period (.), an underscore
# (_) or a dash (-). These separators can be added to patterns. Example:
# [firstname].[lastname]
# would generate the username john.smith
#
# **Adding a string to a pattern**
# Same as the separators, it is possible to add a static string to username
# suggestions. For example, the pattern:
# [lastname]_nyc
# would generate the username smith_nyc
#
# **What if the API runs out of patterns?**
# The following pattern is used as the last resort:
# [C9_firstname][C9_lastname][#]
accounts.UsernameGeneration.patterns=[firstname][C1_lastname][C1_customfield],[firstname][C1_lastname][customfield],[C1_firstname].[lastname][C1_customfield],[C1_firstname].[lastname]_[customfield],[C1_firstname][lastname][C1_customfield],[firstname]_[lastname][C1_customfield],[C1_firstname]_[lastname][C1_customfield],[firstname][lastname],[C1_firstname][lastname],[firstname][C1_lastname],[C1_firstname].[lastname],[firstname]_[lastname],[firstname].[lastname]



# ==============================================================================
# SSL properties
# ==============================================================================
#
# Enables HTTPS support over SSL.
# (The possible values are: YES, NO, default: NO).
security.ssl.useSSL=NO

# Defines where the jks file is located.
# This can be generated executing the following command:
# keytool -genkey -alias sitename -keyalg RSA -keystore keystore.jks -keysize 2048
# If the file is placed in the same folder of jar file, you can use: ./keystore,jks
security.ssl.keyStorePath=

# Password provided when the jks file was generated.
# This value is required when useSSL is set to YES.
security.ssl.keyStorePassword=

# Commonly is the same as the key store, but it can change if it is not a
# self-generated certificate.
# This value is required when useSSL is set to YES.
security.ssl.keyManagerPassword=



# ==============================================================================
# Cache location properties
# ==============================================================================
#
# The name of the database where the cache is stored.
# This only applies when cacheUsernames is set to YES.
# (default: usernames).
db.h2.name=

# Path where the database files are stored.
# This only applies when cacheUsernames is set to YES.
# (default: ./).
db.h2.path=
